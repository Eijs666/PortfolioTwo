package com.company;
import java.util.*;

public class AdjacencyGraph {
    //MST VARIABLES
    boolean visited[];
    public static int MST =0;

    private ArrayList<Vertex> vertices;

    public AdjacencyGraph() {
        vertices = new ArrayList<Vertex>();
    }

    public void addVertex(Vertex v) {
        vertices.add(v);
    }

    public void newEdge(Vertex from, Vertex to, Integer distance) {
        if (!(vertices.contains(from) && vertices.contains(to))) {
            System.out.println("Vertex not found");
            return;
        }
        Edge newEdge = new Edge(from, to, distance);
        Edge newEdge2 = new Edge(to, from, distance);
    }

    public void printGraph() {
        Vertex currentVertex;
        for (int i = 0; i < vertices.size(); i++) {
            currentVertex = vertices.get(i);
            System.out.println(" Edges from Vertex: " + currentVertex.getName());
            for (int j = 0; j < currentVertex.getOutEdges().size(); j++) {
                System.out.println(" To " + currentVertex.getOutEdges().get(j).getToVertex()
                        .getName() + " weight: " + currentVertex.getOutEdges().get(j).getWeight());
            }
            System.out.println(" ");
        }
    }

    public void MSTPRIMS() {

        PriorityQueue<Vertex> Q = new PriorityQueue<Vertex>();

        if (vertices.size() > 0) {
            vertices.get(0).distance = 0;
            Q.offer(vertices.get(0));
        }

        int counter = 0;


        while (!Q.isEmpty() && counter < vertices.size()) {
            Vertex u = Q.poll();
            if (!u.visited) {
                for (int i = 0; i < u.getOutEdges().size(); i++) {
                    Edge e = u.getOutEdges().get(i);
                    Vertex v = e.getToVertex();

                    if (!v.visited && e.getWeight() < v.distance) {
                        v.distance = e.getWeight();
                        v.predessecor = u;
                        Q.offer(v);
                    }
                }


                u.visited = true;
                counter++;
                MST += u.distance;
            }
        }
        System.out.println("MST Distance: " + MST);
        PrintMST();

    }
    public void PrintMST(){
        for(int i=0; i < vertices.size(); i++){
            if(vertices.get(i).predessecor != null)
                System.out.println(vertices.get(i).predessecor.getName() + " To " + vertices.get(i).getName() + " Edge weight: " + vertices.get(i).getDistance());
        }

    }
    public void calculator()
    {
        int price = 1000000;
        int distance = MST;
        System.out.println(" The distance of the entire tree is " + distance+" and the price of is " + distance * price);

    }
}


class Vertex implements Comparable<Vertex>{
    private String Name;
    private ArrayList<Edge> outEdges;

    Integer distance = Integer.MAX_VALUE;

    Vertex predessecor = null;
    boolean visited = false;

    public String getName() {
        return Name;
    }
    public void setName(String name) {
        Name = name;
    }

    public ArrayList<Edge> getOutEdges() {
        return outEdges;
    }
    public void setOutEdges(ArrayList<Edge> outEdges) {
        this.outEdges = outEdges;
    }

    public Integer getDistance() {
        return distance;
    }
    public void setDistance(Integer distance) {
        this.distance = distance;
    }

    public Vertex(String id)
    {
        this.Name = id;
        outEdges = new ArrayList<>();
    }
    public void addOutEdge(Edge outEdge){
        outEdges.add(outEdge);
    }

    @Override
    public int compareTo(Vertex o) {
        if (this.distance < o.distance){
            return -1;
        }
        if(this.distance > o.distance){
            return 1;
        }
        return 0;
    }
}

//Edge(weight) defined by the length from one vertex(city) to another Vertex(city)
class Edge{
    private Vertex fromVertex;
    private Vertex toVertex;
    private Integer weight;

    public Edge(Vertex from, Vertex to, Integer costWeight){
        fromVertex = from;
        toVertex = to;
        weight = costWeight;
        from.addOutEdge(this);
    }
    public void setFromVertex(Vertex fromVertex) {
        this.fromVertex = fromVertex;
    }
    public Vertex getFromVertex() {
        return fromVertex;
    }

    public void setToVertex(Vertex toVertex) {
        this.toVertex = toVertex;
    }
    public Vertex getToVertex() {
        return toVertex;
    }

    public void setWeight(Integer weight) {
        this.weight = weight;
    }
    public Integer getWeight() {
        return weight;
    }

}
